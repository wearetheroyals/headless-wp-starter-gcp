// breakpoints.scss v1.0 | @ajlkn | MIT licensed */

// Vars.

/// Breakpoints.
/// @var {list}
$breakpoints: () !global;

// Mixins.

/// Sets breakpoints.
/// @param {map} $x Breakpoints.
@mixin breakpoints($x: ()) {
  $breakpoints: $x !global;
}

/// Wraps @content in a @media block targeting a specific orientation.
/// @param {string} $orientation Orientation.
@mixin orientation($orientation) {
  @media screen and (orientation: #{$orientation}) {
    @content;
  }
}

/// Wraps @content in a @media block using a given query.
/// @param {string} $query Query.
@mixin breakpoint($query: null) {
  $breakpoint: null;
  $op: null;
  $media: null;

  // Determine operator, breakpoint.

  // Greater than or equal.
  @if (str-slice($query, 0, 2) == '>=') {
    $op: 'gte';
    $breakpoint: str-slice($query, 3);
  }

  // Less than or equal.
  @elseif (str-slice($query, 0, 2) == '<=') {
    $op: 'lte';
    $breakpoint: str-slice($query, 3);
  }

  // Greater than.
  @elseif (str-slice($query, 0, 1) == '>') {
    $op: 'gt';
    $breakpoint: str-slice($query, 2);
  }

  // Less than.
  @elseif (str-slice($query, 0, 1) == '<') {
    $op: 'lt';
    $breakpoint: str-slice($query, 2);
  }

  // Not.
  @elseif (str-slice($query, 0, 1) == '!') {
    $op: 'not';
    $breakpoint: str-slice($query, 2);
  }

  // Equal.
  @else {
    $op: 'eq';
    $breakpoint: $query;
  }

  // Build media.
  @if ($breakpoint and map-has-key($breakpoints, $breakpoint)) {
    $a: map-get($breakpoints, $breakpoint);

    // Range.
    @if (type-of($a) == 'list') {
      $x: nth($a, 1);
      $y: nth($a, 2);

      // Max only.
      @if ($x == null) {
        // Greater than or equal (>= 0 / anything)
        @if ($op == 'gte') {
          $media: 'screen';
        }

        // Less than or equal (<= y)
        @elseif ($op == 'lte') {
          $media: 'screen and (max-width: ' + $y + ')';
        }

        // Greater than (> y)
        @elseif ($op == 'gt') {
          $media: 'screen and (min-width: ' + ($y + 1) + ')';
        }

        // Less than (< 0 / invalid)
        @elseif ($op == 'lt') {
          $media: 'screen and (max-width: -1px)';
        }

        // Not (> y)
        @elseif ($op == 'not') {
          $media: 'screen and (min-width: ' + ($y + 1) + ')';
        }

        // Equal (<= y)
        @else {
          $media: 'screen and (max-width: ' + $y + ')';
        }
      }

      // Min only.
      @else if ($y == null) {
        // Greater than or equal (>= x)
        @if ($op == 'gte') {
          $media: 'screen and (min-width: ' + $x + ')';
        }

        // Less than or equal (<= inf / anything)
        @elseif ($op == 'lte') {
          $media: 'screen';
        }

        // Greater than (> inf / invalid)
        @elseif ($op == 'gt') {
          $media: 'screen and (max-width: -1px)';
        }

        // Less than (< x)
        @elseif ($op == 'lt') {
          $media: 'screen and (max-width: ' + ($x - 1) + ')';
        }

        // Not (< x)
        @elseif ($op == 'not') {
          $media: 'screen and (max-width: ' + ($x - 1) + ')';
        }

        // Equal (>= x)
        @else {
          $media: 'screen and (min-width: ' + $x + ')';
        }
      }

      // Min and max.
      @else {
        // Greater than or equal (>= x)
        @if ($op == 'gte') {
          $media: 'screen and (min-width: ' + $x + ')';
        }

        // Less than or equal (<= y)
        @elseif ($op == 'lte') {
          $media: 'screen and (max-width: ' + $y + ')';
        }

        // Greater than (> y)
        @elseif ($op == 'gt') {
          $media: 'screen and (min-width: ' + ($y + 1) + ')';
        }

        // Less than (< x)
        @elseif ($op == 'lt') {
          $media: 'screen and (max-width: ' + ($x - 1) + ')';
        }

        // Not (< x and > y)
        @elseif ($op == 'not') {
          $media: 'screen and (max-width: ' + ($x - 1) +
            '), screen and (min-width: ' + ($y + 1) + ')';
        }

        // Equal (>= x and <= y)
        @else {
          $media: 'screen and (min-width: ' +
            $x +
            ') and (max-width: ' +
            $y +
            ')';
        }
      }
    }

    // String.
    @else {
      // Missing a media type? Prefix with "screen".
      @if (str-slice($a, 0, 1) == '(') {
        $media: 'screen and ' + $a;
      }

      // Otherwise, use as-is.
      @else {
        $media: $a;
      }
    }
  }

  // Output.
  @media #{$media} {
    @content;
  }
}

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next(
  $name,
  $breakpoints: $grid-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if(
    $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

/// Below conflicts with the Forty CSS Framework

/// Wraps @content in a @media block using a given breakpoint.
/// @param {string} $breakpoint Breakpoint.
/// @param {map} $queries Additional queries.
// @mixin breakpoint($name, $breakpoints: $grid-breakpoints) {
//   $min: breakpoint-min($name, $breakpoints);
//   @if $min {
//     @media (min-width: $min) {
//       @content;
//     }
//   } @else {
//     @content;
//   }
// }

/// Wraps @content in a @media block targeting a specific orientation.
/// @param {string} $orientation Orientation.
// @mixin orientation($orientation) {
//   @media screen and (orientation: #{$orientation}) {
//     @content;
//   }
// }

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}
